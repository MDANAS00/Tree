Link - https://leetcode.com/problems/binary-tree-level-order-traversal/
Time Complexity - O(N)
Space Complexity - O(H)

class Solution {
    public static class Pair {
        TreeNode root;
        int level;
        Pair(TreeNode root, int level) {
            this.root = root;
            this.level = level;
        }
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<>();
        if(root == null) return levels;

        Queue<Pair> q = new ArrayDeque<>();
        q.add(new Pair(root,0));
        int level = -1;

        while(q.size() > 0) {
            Pair p = q.remove();

            if(p.level > level) {
                levels.add(new ArrayList<>());
                level = p.level;
            }
            levels.get(levels.size() - 1).add(p.root.val);

            if(p.root.left != null)
                    q.add(new Pair(p.root.left, p.level + 1));
            if(p.root.right != null)
                    q.add(new Pair(p.root.right, p.level + 1));
        }
        return levels;
    }
}



Approach 2 :-

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<>();
        if(root == null) return levels;

        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);

        while(q.size() > 0) {
            List<Integer> level = new ArrayList<>();
            for(int c = q.size();c>0;c--) {
                root = q.remove();
                level.add(root.val);

                if(root.left != null) q.add(root.left);
                if(root.right != null) q.add(root.right);
            }
            levels.add(level);
        }
        return levels;
    }
}

Approach 3 :-

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<>();
        
        if(root == null) 
                return levels;
        
        TreeNode marker = new TreeNode(-1);
        
        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);
        q.add(marker);

        List<Integer> level = new ArrayList<>();
        
        while(q.size() > 1 || q.peek() != marker) {
            root = q.remove();

            if(root != marker) {
                level.add(root.val);
                if(root.left != null) q.add(root.left);
                if(root.right != null) q.add(root.right);
            }
            else {
                q.add(marker);
                levels.add(level);
                level = new ArrayList<>();
            }
        }
        levels.add(level);
        return levels;
    }
}