Link - https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
Time Complexity - O(N)
Space Complexity - O(H)

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<>();
        if(root == null) return levels;

        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);

        while(q.size() > 0) {
            List<Integer> level = new ArrayList<>();
            for(int c = q.size();c>0;c--) {
                root = q.remove();
                level.add(root.val);

                if(root.left != null) q.add(root.left);
                if(root.right != null) q.add(root.right);
            }
            levels.add(level);
        }
        Collections.reverse(levels);
        return levels;
    }
}